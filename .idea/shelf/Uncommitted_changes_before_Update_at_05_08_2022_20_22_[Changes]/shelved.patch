Index: notebook.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"metadata\": {\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   },\r\n   \"source\": [\r\n    \"# Определение стоимости автомобилей\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"metadata\": {\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   },\r\n   \"source\": [\r\n    \"Сервис по продаже автомобилей с пробегом «Не бит, не крашен» разрабатывает приложение для привлечения новых клиентов. В нём можно быстро узнать рыночную стоимость своего автомобиля. В вашем распоряжении исторические данные: технические характеристики, комплектации и цены автомобилей. Вам нужно построить модель для определения стоимости. \\n\",\r\n    \"\\n\",\r\n    \"Заказчику важны:\\n\",\r\n    \"\\n\",\r\n    \"- качество предсказания (значение метрики RMSE должно быть меньше 2500);\\n\",\r\n    \"- скорость предсказания;\\n\",\r\n    \"- время обучения.\\n\",\r\n    \"\\n\",\r\n    \"Чтобы усилить исследование, не ограничивайтесь градиентным бустингом. Попробуйте более простые модели — иногда они работают лучше. Эти редкие случаи легко пропустить, если всегда применять только бустинг. Поэкспериментируйте и сравните характеристики моделей: время обучения, время предсказания, точность результата.\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"metadata\": {\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   },\r\n   \"source\": [\r\n    \"## Описание данных\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"metadata\": {\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   },\r\n   \"source\": [\r\n    \"- Признаки\\n\",\r\n    \"    - DateCrawled — дата скачивания анкеты из базы\\n\",\r\n    \"    - VehicleType — тип автомобильного кузова\\n\",\r\n    \"    - RegistrationYear — год регистрации автомобиля\\n\",\r\n    \"    - Gearbox — тип коробки передач\\n\",\r\n    \"    - Power — мощность (л. с.)\\n\",\r\n    \"    - Model — модель автомобиля\\n\",\r\n    \"    - Kilometer — пробег (км)\\n\",\r\n    \"    - RegistrationMonth — месяц регистрации автомобиля\\n\",\r\n    \"    - FuelType — тип топлива\\n\",\r\n    \"    - Brand — марка автомобиля\\n\",\r\n    \"    - NotRepaired — была машина в ремонте или нет\\n\",\r\n    \"    - DateCreated — дата создания анкеты\\n\",\r\n    \"    - NumberOfPictures — количество фотографий автомобиля\\n\",\r\n    \"    - PostalCode — почтовый индекс владельца анкеты (пользователя)\\n\",\r\n    \"    - LastSeen — дата последней активности пользователя\\n\",\r\n    \"- Целевой признак\\n\",\r\n    \"    - Price — цена (евро)\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"metadata\": {\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   },\r\n   \"source\": [\r\n    \"Импортируем необходимые модули.\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 33,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"from IPython.display import display\\n\",\r\n    \"\\n\",\r\n    \"import pandas as pd\\n\",\r\n    \"import sweetviz as sv\\n\",\r\n    \"\\n\",\r\n    \"from sklearn.model_selection import train_test_split, GridSearchCV\\n\",\r\n    \"from sklearn.preprocessing import StandardScaler, LabelEncoder\\n\",\r\n    \"from sklearn.pipeline import Pipeline\\n\",\r\n    \"from sklearn.metrics import mean_squared_error\\n\",\r\n    \"\\n\",\r\n    \"from sklearn.linear_model import ElasticNet\\n\",\r\n    \"from sklearn.ensemble import RandomForestRegressor\\n\",\r\n    \"from lightgbm import LGBMRegressor\\n\",\r\n    \"\\n\",\r\n    \"import shap\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Введем константы.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 2,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"SEED = 515\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"## Подготовка данных\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 3,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"           DateCrawled  Price VehicleType  RegistrationYear Gearbox  Power  \\\\\\n0  2016-03-24 11:52:17    480         NaN              1993  manual      0   \\n1  2016-03-24 10:58:45  18300       coupe              2011  manual    190   \\n2  2016-03-14 12:52:21   9800         suv              2004    auto    163   \\n3  2016-03-17 16:54:04   1500       small              2001  manual     75   \\n4  2016-03-31 17:25:20   3600       small              2008  manual     69   \\n\\n   Model  Kilometer  RegistrationMonth  FuelType       Brand NotRepaired  \\\\\\n0   golf     150000                  0    petrol  volkswagen         NaN   \\n1    NaN     125000                  5  gasoline        audi         yes   \\n2  grand     125000                  8  gasoline        jeep         NaN   \\n3   golf     150000                  6    petrol  volkswagen          no   \\n4  fabia      90000                  7  gasoline       skoda          no   \\n\\n           DateCreated  NumberOfPictures  PostalCode             LastSeen  \\n0  2016-03-24 00:00:00                 0       70435  2016-04-07 03:16:57  \\n1  2016-03-24 00:00:00                 0       66954  2016-04-07 01:46:50  \\n2  2016-03-14 00:00:00                 0       90480  2016-04-05 12:47:46  \\n3  2016-03-17 00:00:00                 0       91074  2016-03-17 17:40:17  \\n4  2016-03-31 00:00:00                 0       60437  2016-04-06 10:17:21  \",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>DateCrawled</th>\\n      <th>Price</th>\\n      <th>VehicleType</th>\\n      <th>RegistrationYear</th>\\n      <th>Gearbox</th>\\n      <th>Power</th>\\n      <th>Model</th>\\n      <th>Kilometer</th>\\n      <th>RegistrationMonth</th>\\n      <th>FuelType</th>\\n      <th>Brand</th>\\n      <th>NotRepaired</th>\\n      <th>DateCreated</th>\\n      <th>NumberOfPictures</th>\\n      <th>PostalCode</th>\\n      <th>LastSeen</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>2016-03-24 11:52:17</td>\\n      <td>480</td>\\n      <td>NaN</td>\\n      <td>1993</td>\\n      <td>manual</td>\\n      <td>0</td>\\n      <td>golf</td>\\n      <td>150000</td>\\n      <td>0</td>\\n      <td>petrol</td>\\n      <td>volkswagen</td>\\n      <td>NaN</td>\\n      <td>2016-03-24 00:00:00</td>\\n      <td>0</td>\\n      <td>70435</td>\\n      <td>2016-04-07 03:16:57</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>2016-03-24 10:58:45</td>\\n      <td>18300</td>\\n      <td>coupe</td>\\n      <td>2011</td>\\n      <td>manual</td>\\n      <td>190</td>\\n      <td>NaN</td>\\n      <td>125000</td>\\n      <td>5</td>\\n      <td>gasoline</td>\\n      <td>audi</td>\\n      <td>yes</td>\\n      <td>2016-03-24 00:00:00</td>\\n      <td>0</td>\\n      <td>66954</td>\\n      <td>2016-04-07 01:46:50</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>2016-03-14 12:52:21</td>\\n      <td>9800</td>\\n      <td>suv</td>\\n      <td>2004</td>\\n      <td>auto</td>\\n      <td>163</td>\\n      <td>grand</td>\\n      <td>125000</td>\\n      <td>8</td>\\n      <td>gasoline</td>\\n      <td>jeep</td>\\n      <td>NaN</td>\\n      <td>2016-03-14 00:00:00</td>\\n      <td>0</td>\\n      <td>90480</td>\\n      <td>2016-04-05 12:47:46</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>2016-03-17 16:54:04</td>\\n      <td>1500</td>\\n      <td>small</td>\\n      <td>2001</td>\\n      <td>manual</td>\\n      <td>75</td>\\n      <td>golf</td>\\n      <td>150000</td>\\n      <td>6</td>\\n      <td>petrol</td>\\n      <td>volkswagen</td>\\n      <td>no</td>\\n      <td>2016-03-17 00:00:00</td>\\n      <td>0</td>\\n      <td>91074</td>\\n      <td>2016-03-17 17:40:17</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>2016-03-31 17:25:20</td>\\n      <td>3600</td>\\n      <td>small</td>\\n      <td>2008</td>\\n      <td>manual</td>\\n      <td>69</td>\\n      <td>fabia</td>\\n      <td>90000</td>\\n      <td>7</td>\\n      <td>gasoline</td>\\n      <td>skoda</td>\\n      <td>no</td>\\n      <td>2016-03-31 00:00:00</td>\\n      <td>0</td>\\n      <td>60437</td>\\n      <td>2016-04-06 10:17:21</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"metadata\": {},\r\n     \"output_type\": \"display_data\"\r\n    },\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"<class 'pandas.core.frame.DataFrame'>\\n\",\r\n      \"RangeIndex: 354369 entries, 0 to 354368\\n\",\r\n      \"Data columns (total 16 columns):\\n\",\r\n      \" #   Column             Non-Null Count   Dtype \\n\",\r\n      \"---  ------             --------------   ----- \\n\",\r\n      \" 0   DateCrawled        354369 non-null  object\\n\",\r\n      \" 1   Price              354369 non-null  int64 \\n\",\r\n      \" 2   VehicleType        316879 non-null  object\\n\",\r\n      \" 3   RegistrationYear   354369 non-null  int64 \\n\",\r\n      \" 4   Gearbox            334536 non-null  object\\n\",\r\n      \" 5   Power              354369 non-null  int64 \\n\",\r\n      \" 6   Model              334664 non-null  object\\n\",\r\n      \" 7   Kilometer          354369 non-null  int64 \\n\",\r\n      \" 8   RegistrationMonth  354369 non-null  int64 \\n\",\r\n      \" 9   FuelType           321474 non-null  object\\n\",\r\n      \" 10  Brand              354369 non-null  object\\n\",\r\n      \" 11  NotRepaired        283215 non-null  object\\n\",\r\n      \" 12  DateCreated        354369 non-null  object\\n\",\r\n      \" 13  NumberOfPictures   354369 non-null  int64 \\n\",\r\n      \" 14  PostalCode         354369 non-null  int64 \\n\",\r\n      \" 15  LastSeen           354369 non-null  object\\n\",\r\n      \"dtypes: int64(7), object(9)\\n\",\r\n      \"memory usage: 43.3+ MB\\n\"\r\n     ]\r\n    },\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"DateCrawled              0\\nPrice                    0\\nVehicleType          37490\\nRegistrationYear         0\\nGearbox              19833\\nPower                    0\\nModel                19705\\nKilometer                0\\nRegistrationMonth        0\\nFuelType             32895\\nBrand                    0\\nNotRepaired          71154\\nDateCreated              0\\nNumberOfPictures         0\\nPostalCode               0\\nLastSeen                 0\\ndtype: int64\"\r\n     },\r\n     \"execution_count\": 3,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"df_dir = \\\"./datasets/\\\"\\n\",\r\n    \"df_name = \\\"autos.csv\\\"\\n\",\r\n    \"df_path = ''.join([df_dir, df_name])\\n\",\r\n    \"\\n\",\r\n    \"df = pd.read_csv(df_path)\\n\",\r\n    \"display(df.head())\\n\",\r\n    \"df.info()\\n\",\r\n    \"df.isna().sum()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Можно видеть, что в категориальных данных содержится значительное количество пропусков.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Вначале, удалим малоинформативные колонки.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 4,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"cols_to_drop = ['DateCrawled', 'DateCreated', 'RegistrationMonth', 'PostalCode', 'LastSeen']\\n\",\r\n    \"df = df.drop(columns=cols_to_drop)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Проверим количество уникальных значений в колонке с количеством фотографий.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 5,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"[0]\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"print(df['NumberOfPictures'].unique())\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Удалим ее как малоинформативную.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 6,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"df = df.drop('NumberOfPictures', axis=1)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Проверим уникальные значения в категориальных колонках на наличие опечаток.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 7,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"VehicleType\\n\",\r\n      \"[nan 'coupe' 'suv' 'small' 'sedan' 'convertible' 'bus' 'wagon' 'other']\\n\",\r\n      \"Gearbox\\n\",\r\n      \"['manual' 'auto' nan]\\n\",\r\n      \"Model\\n\",\r\n      \"['golf' nan 'grand' 'fabia' '3er' '2_reihe' 'other' 'c_max' '3_reihe'\\n\",\r\n      \" 'passat' 'navara' 'ka' 'polo' 'twingo' 'a_klasse' 'scirocco' '5er'\\n\",\r\n      \" 'meriva' 'arosa' 'c4' 'civic' 'transporter' 'punto' 'e_klasse' 'clio'\\n\",\r\n      \" 'kadett' 'kangoo' 'corsa' 'one' 'fortwo' '1er' 'b_klasse' 'signum'\\n\",\r\n      \" 'astra' 'a8' 'jetta' 'fiesta' 'c_klasse' 'micra' 'vito' 'sprinter' '156'\\n\",\r\n      \" 'escort' 'forester' 'xc_reihe' 'scenic' 'a4' 'a1' 'insignia' 'combo'\\n\",\r\n      \" 'focus' 'tt' 'a6' 'jazz' 'omega' 'slk' '7er' '80' '147' '100' 'z_reihe'\\n\",\r\n      \" 'sportage' 'sorento' 'v40' 'ibiza' 'mustang' 'eos' 'touran' 'getz' 'a3'\\n\",\r\n      \" 'almera' 'megane' 'lupo' 'r19' 'zafira' 'caddy' 'mondeo' 'cordoba' 'colt'\\n\",\r\n      \" 'impreza' 'vectra' 'berlingo' 'tiguan' 'i_reihe' 'espace' 'sharan'\\n\",\r\n      \" '6_reihe' 'panda' 'up' 'seicento' 'ceed' '5_reihe' 'yeti' 'octavia' 'mii'\\n\",\r\n      \" 'rx_reihe' '6er' 'modus' 'fox' 'matiz' 'beetle' 'c1' 'rio' 'touareg'\\n\",\r\n      \" 'logan' 'spider' 'cuore' 's_max' 'a2' 'galaxy' 'c3' 'viano' 's_klasse'\\n\",\r\n      \" '1_reihe' 'avensis' 'roomster' 'sl' 'kaefer' 'santa' 'cooper' 'leon'\\n\",\r\n      \" '4_reihe' 'a5' '500' 'laguna' 'ptcruiser' 'clk' 'primera' 'x_reihe'\\n\",\r\n      \" 'exeo' '159' 'transit' 'juke' 'qashqai' 'carisma' 'accord' 'corolla'\\n\",\r\n      \" 'lanos' 'phaeton' 'verso' 'swift' 'rav' 'picanto' 'boxster' 'kalos'\\n\",\r\n      \" 'superb' 'stilo' 'alhambra' 'mx_reihe' 'roadster' 'ypsilon' 'cayenne'\\n\",\r\n      \" 'galant' 'justy' '90' 'sirion' 'crossfire' 'agila' 'duster' 'cr_reihe'\\n\",\r\n      \" 'v50' 'c_reihe' 'v_klasse' 'm_klasse' 'yaris' 'c5' 'aygo' 'cc' 'carnival'\\n\",\r\n      \" 'fusion' '911' 'bora' 'forfour' 'm_reihe' 'cl' 'tigra' '300c' 'spark'\\n\",\r\n      \" 'v70' 'kuga' 'x_type' 'ducato' 's_type' 'x_trail' 'toledo' 'altea'\\n\",\r\n      \" 'voyager' 'calibra' 'bravo' 'antara' 'tucson' 'citigo' 'jimny' 'wrangler'\\n\",\r\n      \" 'lybra' 'q7' 'lancer' 'captiva' 'c2' 'discovery' 'freelander' 'sandero'\\n\",\r\n      \" 'note' '900' 'cherokee' 'clubman' 'samara' 'defender' '601' 'cx_reihe'\\n\",\r\n      \" 'legacy' 'pajero' 'auris' 'niva' 's60' 'nubira' 'vivaro' 'g_klasse'\\n\",\r\n      \" 'lodgy' '850' 'range_rover' 'q3' 'serie_2' 'glk' 'charade' 'croma'\\n\",\r\n      \" 'outlander' 'doblo' 'musa' 'move' '9000' 'v60' '145' 'aveo' '200' 'b_max'\\n\",\r\n      \" 'range_rover_sport' 'terios' 'rangerover' 'q5' 'range_rover_evoque'\\n\",\r\n      \" 'materia' 'delta' 'gl' 'kalina' 'amarok' 'elefantino' 'i3' 'kappa'\\n\",\r\n      \" 'serie_3' 'serie_1']\\n\",\r\n      \"FuelType\\n\",\r\n      \"['petrol' 'gasoline' nan 'lpg' 'other' 'hybrid' 'cng' 'electric']\\n\",\r\n      \"Brand\\n\",\r\n      \"['volkswagen' 'audi' 'jeep' 'skoda' 'bmw' 'peugeot' 'ford' 'mazda'\\n\",\r\n      \" 'nissan' 'renault' 'mercedes_benz' 'opel' 'seat' 'citroen' 'honda' 'fiat'\\n\",\r\n      \" 'mini' 'smart' 'hyundai' 'sonstige_autos' 'alfa_romeo' 'subaru' 'volvo'\\n\",\r\n      \" 'mitsubishi' 'kia' 'suzuki' 'lancia' 'toyota' 'chevrolet' 'dacia'\\n\",\r\n      \" 'daihatsu' 'trabant' 'saab' 'chrysler' 'jaguar' 'daewoo' 'porsche'\\n\",\r\n      \" 'rover' 'land_rover' 'lada']\\n\",\r\n      \"NotRepaired\\n\",\r\n      \"[nan 'yes' 'no']\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"cat_cols = [col for col in df.columns if df[col].dtype == 'object']\\n\",\r\n    \"\\n\",\r\n    \"for col in cat_cols:\\n\",\r\n    \"    print(col)\\n\",\r\n    \"    print(df[col].unique())\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Опечатки не обнаружены.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Заменим пропущенные значения на unknown.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 8,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Количество пропущенных значений:\\n\"\r\n     ]\r\n    },\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"Price               0\\nVehicleType         0\\nRegistrationYear    0\\nGearbox             0\\nPower               0\\nModel               0\\nKilometer           0\\nFuelType            0\\nBrand               0\\nNotRepaired         0\\ndtype: int64\"\r\n     },\r\n     \"execution_count\": 8,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"df = df.fillna('unknown')\\n\",\r\n    \"print('Количество пропущенных значений:')\\n\",\r\n    \"df.isna().sum()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Проверим числовые данные.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 9,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"               Price  RegistrationYear          Power      Kilometer\\ncount  354369.000000     354369.000000  354369.000000  354369.000000\\nmean     4416.656776       2004.234448     110.094337  128211.172535\\nstd      4514.158514         90.227958     189.850405   37905.341530\\nmin         0.000000       1000.000000       0.000000    5000.000000\\n25%      1050.000000       1999.000000      69.000000  125000.000000\\n50%      2700.000000       2003.000000     105.000000  150000.000000\\n75%      6400.000000       2008.000000     143.000000  150000.000000\\nmax     20000.000000       9999.000000   20000.000000  150000.000000\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>Price</th>\\n      <th>RegistrationYear</th>\\n      <th>Power</th>\\n      <th>Kilometer</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>count</th>\\n      <td>354369.000000</td>\\n      <td>354369.000000</td>\\n      <td>354369.000000</td>\\n      <td>354369.000000</td>\\n    </tr>\\n    <tr>\\n      <th>mean</th>\\n      <td>4416.656776</td>\\n      <td>2004.234448</td>\\n      <td>110.094337</td>\\n      <td>128211.172535</td>\\n    </tr>\\n    <tr>\\n      <th>std</th>\\n      <td>4514.158514</td>\\n      <td>90.227958</td>\\n      <td>189.850405</td>\\n      <td>37905.341530</td>\\n    </tr>\\n    <tr>\\n      <th>min</th>\\n      <td>0.000000</td>\\n      <td>1000.000000</td>\\n      <td>0.000000</td>\\n      <td>5000.000000</td>\\n    </tr>\\n    <tr>\\n      <th>25%</th>\\n      <td>1050.000000</td>\\n      <td>1999.000000</td>\\n      <td>69.000000</td>\\n      <td>125000.000000</td>\\n    </tr>\\n    <tr>\\n      <th>50%</th>\\n      <td>2700.000000</td>\\n      <td>2003.000000</td>\\n      <td>105.000000</td>\\n      <td>150000.000000</td>\\n    </tr>\\n    <tr>\\n      <th>75%</th>\\n      <td>6400.000000</td>\\n      <td>2008.000000</td>\\n      <td>143.000000</td>\\n      <td>150000.000000</td>\\n    </tr>\\n    <tr>\\n      <th>max</th>\\n      <td>20000.000000</td>\\n      <td>9999.000000</td>\\n      <td>20000.000000</td>\\n      <td>150000.000000</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 9,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"df.describe()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Можно видеть некорректные данные в колонках с годом регистрации и мощностью автомобиля. В колонке с годом регистрации присутствуют недостоверно малые значения 1000 и недостоверно большие значения 9999. В колонке с мощностью также обнаруживаются крайне малые значения (0) и крайне большие значения (20000) лошадиных сил.\\n\",\r\n    \"- Возможно, что некорректные данные в столбце с годом регистрации появились из-за того, что информации была записана в разных форматах: в годах и в днях начиная с начала 1970 года. Поэтому заменим значения меньше 1970 и больше 2022 на число, равное сумме 1970 и результата целочисленного деления некорректного значения на 365.\\n\",\r\n    \"- Высокие значения в столбце с мощностью автомобиля могут быть связаны также с неправильным форматом данных (указаны Ватты вместо лошадиных сил), поэтому значения выше 500 (примерная мощность тяжелого грузовика) заменим на частное некорректного значения и 736, т.к. 1 л.с. = 736 Вт. Нулевые значения в рассматриваемом столбце могли появиться из-за того, что владелец не знает мощности своего автомобиля и поэтому не указал его, заменим его на медианное.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 10,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"df['RegistrationYear'] = df['RegistrationYear'].apply(lambda x: x // 365 + 1970 if (x > 2022 or x < 1970) else x)\\n\",\r\n    \"\\n\",\r\n    \"df['Power'] = df['Power'].apply(lambda x: x // 736 if x > 500 else x)\\n\",\r\n    \"power_median = int(df['Power'].median())\\n\",\r\n    \"df['Power'] = df['Power'].apply(lambda x: power_median if x == 0 else x)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Проведем исследовательский анализ данных с помощью пакета sweetviz.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 11,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"# report_autos = sv.analyze((df, 'autos_df'), target_feat='Price')\\n\",\r\n    \"# report_autos.show_notebook()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Исследовательский анализ данных показывает, что заметное влияние на увеличение цены оказывает: наличие автоматической коробки передач, увеличение мощности двигателя, отсутствие ремонта. Также можно отметить, что некоторые бренды автомобилей, например, BMW и Mercedes-Benz намного отличаются по цене от других.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"## Анализ моделей\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"### Линейная регрессия\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Закодируем категориальные данные методом OHE.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 12,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Размер набора данных до OHE: (354369, 10)\\n\",\r\n      \"Размер набора данных после OHE: (354369, 312)\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"df_ohe = df.copy()\\n\",\r\n    \"df_ohe = pd.get_dummies(df_ohe, drop_first=True)\\n\",\r\n    \"\\n\",\r\n    \"print('Размер набора данных до OHE:', df.shape)\\n\",\r\n    \"print('Размер набора данных после OHE:', df_ohe.shape)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Разделим данные на тренировочную и тестовую выборки\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 13,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"X_ohe = df_ohe.drop('Price', axis=1)\\n\",\r\n    \"y_ohe = df_ohe['Price']\\n\",\r\n    \"\\n\",\r\n    \"X_ohe_train, X_ohe_test, y_ohe_train, y_ohe_test = train_test_split(X_ohe, y_ohe, test_size=0.2, random_state=SEED)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Создадим конвейер для определения лучших гиперпараметров модели.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 14,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"# pipe_lr = Pipeline([('scaler', StandardScaler()),\\n\",\r\n    \"#                     ('lr', ElasticNet())])\\n\",\r\n    \"#\\n\",\r\n    \"# params_lr = {'lr__l1_ratio': [0, 1],\\n\",\r\n    \"#              'lr__alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000, 10000],\\n\",\r\n    \"#              'lr__fit_intercept': [True, False]}\\n\",\r\n    \"#\\n\",\r\n    \"# grid_search_lr = GridSearchCV(estimator=pipe_lr,\\n\",\r\n    \"#                               param_grid=params_lr,\\n\",\r\n    \"#                               cv=5,\\n\",\r\n    \"#                               n_jobs=-1,\\n\",\r\n    \"#                               verbose=1)\\n\",\r\n    \"#\\n\",\r\n    \"# grid_search_lr.fit(X_ohe_train, y_ohe_train)\\n\",\r\n    \"# grid_search_lr.best_params_\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Создадим модель с лучшими параметрами и оценим ее время работы и качество.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 15,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"best_pipe_lr = Pipeline([('scaler', StandardScaler()),\\n\",\r\n    \"                         ('lr', ElasticNet(alpha=0.1, fit_intercept=True, l1_ratio=1, max_iter=10000))])\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 16,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Время обучения ElasticNet на тренировочной выборке:\\n\",\r\n      \"Wall time: 13min 14s\\n\"\r\n     ]\r\n    },\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"Pipeline(steps=[('scaler', StandardScaler()),\\n                ('lr', ElasticNet(alpha=0.1, l1_ratio=1, max_iter=10000))])\",\r\n      \"text/html\": \"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \\\"▸\\\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \\\"▾\\\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \\\"\\\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \\\"\\\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \\\"\\\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\\\"sk-container-id-1\\\" class=\\\"sk-top-container\\\"><div class=\\\"sk-text-repr-fallback\\\"><pre>Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\\n                (&#x27;lr&#x27;, ElasticNet(alpha=0.1, l1_ratio=1, max_iter=10000))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\\\"sk-container\\\" hidden><div class=\\\"sk-item sk-dashed-wrapped\\\"><div class=\\\"sk-label-container\\\"><div class=\\\"sk-label sk-toggleable\\\"><input class=\\\"sk-toggleable__control sk-hidden--visually\\\" id=\\\"sk-estimator-id-1\\\" type=\\\"checkbox\\\" ><label for=\\\"sk-estimator-id-1\\\" class=\\\"sk-toggleable__label sk-toggleable__label-arrow\\\">Pipeline</label><div class=\\\"sk-toggleable__content\\\"><pre>Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\\n                (&#x27;lr&#x27;, ElasticNet(alpha=0.1, l1_ratio=1, max_iter=10000))])</pre></div></div></div><div class=\\\"sk-serial\\\"><div class=\\\"sk-item\\\"><div class=\\\"sk-estimator sk-toggleable\\\"><input class=\\\"sk-toggleable__control sk-hidden--visually\\\" id=\\\"sk-estimator-id-2\\\" type=\\\"checkbox\\\" ><label for=\\\"sk-estimator-id-2\\\" class=\\\"sk-toggleable__label sk-toggleable__label-arrow\\\">StandardScaler</label><div class=\\\"sk-toggleable__content\\\"><pre>StandardScaler()</pre></div></div></div><div class=\\\"sk-item\\\"><div class=\\\"sk-estimator sk-toggleable\\\"><input class=\\\"sk-toggleable__control sk-hidden--visually\\\" id=\\\"sk-estimator-id-3\\\" type=\\\"checkbox\\\" ><label for=\\\"sk-estimator-id-3\\\" class=\\\"sk-toggleable__label sk-toggleable__label-arrow\\\">ElasticNet</label><div class=\\\"sk-toggleable__content\\\"><pre>ElasticNet(alpha=0.1, l1_ratio=1, max_iter=10000)</pre></div></div></div></div></div></div></div>\"\r\n     },\r\n     \"execution_count\": 16,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"%%time\\n\",\r\n    \"print('Время обучения ElasticNet на тренировочной выборке:')\\n\",\r\n    \"best_pipe_lr.fit(X_ohe_train, y_ohe_train)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 17,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Время предсказания ElasticNet на тестовой выборке:\\n\",\r\n      \"Wall time: 1.08 s\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"%%time\\n\",\r\n    \"print('Время предсказания ElasticNet на тестовой выборке:')\\n\",\r\n    \"y_lr_pred = best_pipe_lr.predict(X_ohe_test)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 18,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"RMSE модели ElasticNet на тестовой выборке: 2703\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"rmse_lr = mean_squared_error(y_ohe_test, y_lr_pred, squared=False)\\n\",\r\n    \"print('RMSE модели ElasticNet на тестовой выборке:', int(rmse_lr))\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"### Случайный лес\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Присвоим строковым значениям индивидуальные метки.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 19,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"   Price  RegistrationYear  Power  Kilometer  VehicleType_LE  Gearbox_LE  \\\\\\n0    480              1993    105     150000               7           1   \\n1  18300              2011    190     125000               2           1   \\n2   9800              2004    163     125000               6           0   \\n3   1500              2001     75     150000               5           1   \\n4   3600              2008     69      90000               5           1   \\n\\n   Model_LE  FuelType_LE  Brand_LE  NotRepaired_LE  \\n0       116            6        38               1  \\n1       228            2         1               2  \\n2       117            2        14               1  \\n3       116            6        38               0  \\n4       101            2        31               0  \",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>Price</th>\\n      <th>RegistrationYear</th>\\n      <th>Power</th>\\n      <th>Kilometer</th>\\n      <th>VehicleType_LE</th>\\n      <th>Gearbox_LE</th>\\n      <th>Model_LE</th>\\n      <th>FuelType_LE</th>\\n      <th>Brand_LE</th>\\n      <th>NotRepaired_LE</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>480</td>\\n      <td>1993</td>\\n      <td>105</td>\\n      <td>150000</td>\\n      <td>7</td>\\n      <td>1</td>\\n      <td>116</td>\\n      <td>6</td>\\n      <td>38</td>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>18300</td>\\n      <td>2011</td>\\n      <td>190</td>\\n      <td>125000</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>228</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>2</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>9800</td>\\n      <td>2004</td>\\n      <td>163</td>\\n      <td>125000</td>\\n      <td>6</td>\\n      <td>0</td>\\n      <td>117</td>\\n      <td>2</td>\\n      <td>14</td>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>1500</td>\\n      <td>2001</td>\\n      <td>75</td>\\n      <td>150000</td>\\n      <td>5</td>\\n      <td>1</td>\\n      <td>116</td>\\n      <td>6</td>\\n      <td>38</td>\\n      <td>0</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>3600</td>\\n      <td>2008</td>\\n      <td>69</td>\\n      <td>90000</td>\\n      <td>5</td>\\n      <td>1</td>\\n      <td>101</td>\\n      <td>2</td>\\n      <td>31</td>\\n      <td>0</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 19,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"df_cat = df.copy()\\n\",\r\n    \"\\n\",\r\n    \"for col in cat_cols:\\n\",\r\n    \"    df_cat[col + '_LE'] = LabelEncoder().fit_transform(df[col])\\n\",\r\n    \"\\n\",\r\n    \"df_le = df_cat[[col for col in df_cat if col not in cat_cols]]\\n\",\r\n    \"df_le.head()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Разделим данные на тренировочную и тестовую выборки\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 20,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"X_le = df_le.drop('Price', axis=1)\\n\",\r\n    \"y_le = df_le['Price']\\n\",\r\n    \"\\n\",\r\n    \"X_le_train, X_le_test, y_le_train, y_le_test = train_test_split(X_le, y_le, test_size=0.2, random_state=SEED)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Создадим конвейер для определения лучших гиперпараметров модели.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 21,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"# params_rf = {'n_estimators': [50, 100, 200, 300],\\n\",\r\n    \"#              'max_depth': [1, 2, 4, 6, 8, 10, 12]}\\n\",\r\n    \"#\\n\",\r\n    \"# grid_search_rf = GridSearchCV(estimator=RandomForestRegressor(random_state=SEED),\\n\",\r\n    \"#                               param_grid=params_rf,\\n\",\r\n    \"#                               cv=5,\\n\",\r\n    \"#                               n_jobs=-1,\\n\",\r\n    \"#                               verbose=1)\\n\",\r\n    \"#\\n\",\r\n    \"# grid_search_rf.fit(X_le_train, y_le_train)\\n\",\r\n    \"# grid_search_rf.best_params_\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Создадим модель с лучшими параметрами и оценим ее время работы и качество.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 22,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"best_rf = RandomForestRegressor(max_depth=12, n_estimators=300, random_state=SEED)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 23,\r\n   \"metadata\": {\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   },\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Время обучения RandomForestRegressor на тренировочной выборке:\\n\",\r\n      \"Wall time: 6min 52s\\n\"\r\n     ]\r\n    },\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"RandomForestRegressor(max_depth=12, n_estimators=300, random_state=515)\",\r\n      \"text/html\": \"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \\\"▸\\\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \\\"▾\\\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \\\"\\\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \\\"\\\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \\\"\\\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\\\"sk-container-id-2\\\" class=\\\"sk-top-container\\\"><div class=\\\"sk-text-repr-fallback\\\"><pre>RandomForestRegressor(max_depth=12, n_estimators=300, random_state=515)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\\\"sk-container\\\" hidden><div class=\\\"sk-item\\\"><div class=\\\"sk-estimator sk-toggleable\\\"><input class=\\\"sk-toggleable__control sk-hidden--visually\\\" id=\\\"sk-estimator-id-4\\\" type=\\\"checkbox\\\" checked><label for=\\\"sk-estimator-id-4\\\" class=\\\"sk-toggleable__label sk-toggleable__label-arrow\\\">RandomForestRegressor</label><div class=\\\"sk-toggleable__content\\\"><pre>RandomForestRegressor(max_depth=12, n_estimators=300, random_state=515)</pre></div></div></div></div></div>\"\r\n     },\r\n     \"execution_count\": 23,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"%%time\\n\",\r\n    \"print('Время обучения RandomForestRegressor на тренировочной выборке:')\\n\",\r\n    \"best_rf.fit(X_le_train, y_le_train)\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 24,\r\n   \"metadata\": {\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   },\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Время предсказания RandomForestRegressor на тестовой выборке:\\n\",\r\n      \"Wall time: 6.35 s\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"%%time\\n\",\r\n    \"print('Время предсказания RandomForestRegressor на тестовой выборке:')\\n\",\r\n    \"y_rf_pred = best_rf.predict(X_le_test)\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 25,\r\n   \"metadata\": {\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   },\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"RMSE модели RandomForestRegressor на тестовой выборке: 1924\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"rmse_rf = mean_squared_error(y_le_test, y_rf_pred, squared=False)\\n\",\r\n    \"print('RMSE модели RandomForestRegressor на тестовой выборке:', int(rmse_rf))\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"### Градиентный бустинг\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Создадим конвейер для определения лучших гиперпараметров модели.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 42,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Fitting 5 folds for each of 140 candidates, totalling 700 fits\\n\"\r\n     ]\r\n    },\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"{'learning_rate': 0.1, 'max_depth': 10, 'n_estimators': 300}\"\r\n     },\r\n     \"execution_count\": 42,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"# params_gb = {'n_estimators': [50, 100, 200, 300],\\n\",\r\n    \"#              'max_depth': [1, 2, 4, 6, 8, 10, 12],\\n\",\r\n    \"#              'learning_rate': [0.0001, 0.001, 0.01, 0.1, 1]}\\n\",\r\n    \"#\\n\",\r\n    \"# grid_search_gb = GridSearchCV(estimator=LGBMRegressor(random_state=SEED),\\n\",\r\n    \"#                               param_grid=params_gb,\\n\",\r\n    \"#                               cv=5,\\n\",\r\n    \"#                               n_jobs=-1,\\n\",\r\n    \"#                               verbose=1)\\n\",\r\n    \"#\\n\",\r\n    \"# grid_search_gb.fit(X_le_train, y_le_train)\\n\",\r\n    \"# grid_search_gb.best_params_\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Создадим модель с лучшими параметрами и оценим ее время работы и качество.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 43,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"best_gb = LGBMRegressor(max_depth=10, n_estimators=300, learning_rate=0.1, random_state=SEED)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 44,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Время обучения LGBMRegressor на тренировочной выборке:\\n\",\r\n      \"Wall time: 6.85 s\\n\"\r\n     ]\r\n    },\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"LGBMRegressor(max_depth=10, n_estimators=300, random_state=515)\",\r\n      \"text/html\": \"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \\\"▸\\\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \\\"▾\\\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \\\"\\\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \\\"\\\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \\\"\\\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\\\"sk-container-id-4\\\" class=\\\"sk-top-container\\\"><div class=\\\"sk-text-repr-fallback\\\"><pre>LGBMRegressor(max_depth=10, n_estimators=300, random_state=515)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\\\"sk-container\\\" hidden><div class=\\\"sk-item\\\"><div class=\\\"sk-estimator sk-toggleable\\\"><input class=\\\"sk-toggleable__control sk-hidden--visually\\\" id=\\\"sk-estimator-id-6\\\" type=\\\"checkbox\\\" checked><label for=\\\"sk-estimator-id-6\\\" class=\\\"sk-toggleable__label sk-toggleable__label-arrow\\\">LGBMRegressor</label><div class=\\\"sk-toggleable__content\\\"><pre>LGBMRegressor(max_depth=10, n_estimators=300, random_state=515)</pre></div></div></div></div></div>\"\r\n     },\r\n     \"execution_count\": 44,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"%%time\\n\",\r\n    \"print('Время обучения LGBMRegressor на тренировочной выборке:')\\n\",\r\n    \"best_gb.fit(X_le_train, y_le_train)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 45,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Время предсказания LGBMRegressor на тестовой выборке:\\n\",\r\n      \"Wall time: 1.36 s\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"%%time\\n\",\r\n    \"print('Время предсказания LGBMRegressor на тестовой выборке:')\\n\",\r\n    \"y_gb_pred = best_gb.predict(X_le_test)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 46,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"RMSE модели LGBMRegressor на тестовой выборке: 1785\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"rmse_gb = mean_squared_error(y_le_test, y_gb_pred, squared=False)\\n\",\r\n    \"print('RMSE модели LGBMRegressor на тестовой выборке:', int(rmse_gb))\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Анализ трех разных моделей показывает, что лидером является модель градиентного бустинга LGBMRegressor. Она обладает наилучшими характеристиками в скорости обучения и предсказания (скорость предсказания только немного уступает линейной регрессии) и наименьшим значением метрики RMSE, меньшим требуемого значения 2500.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"## Важность признаков\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Оценим важность признаков для модели градиентного бустинга с помощью пакета SHAP.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 47,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"<Figure size 576x367.2 with 2 Axes>\",\r\n      \"image/png\": \"\\n\"\r\n     },\r\n     \"metadata\": {\r\n      \"needs_background\": \"light\"\r\n     },\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"shap_gb = shap.TreeExplainer(best_gb).shap_values(X_le_train)\\n\",\r\n    \"shap.summary_plot(shap_gb, X_le_train, plot_size='auto')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Значения слева от центральной вертикальной линии показывают тенденцию к уменьшению цены автомобиля, а справа к увеличению. Чем толще участок горизонтальной линии, тем больше подобных образцов. Цвет горизонтальной линии соответствует величине признака (чем ближе к красному, тем выше и соответственно чем ближе к синему тем меньше).\\n\",\r\n    \"\\n\",\r\n    \"Можно видеть, что наибольшее влияние на цену автомобиля оказываю год регистрации и мощность двигателя. Чем выше эти величины, т.е. чем мощнее автомобиль и чем он новее тем выше будет его цена. Пробег автомобиля не оказывает однозначного влияния на цену, автомобили с низким пробегом могут обладать, как высокой, так и низкой ценой. Также можно интерпретировать признаки с малым количеством меток: отсутствие ремонта приводит к удорожанию автомобиля так же как и наличие автоматической коробки передач. Признаки с большим количеством меток интерпретировать затруднительно.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"## Вывод\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"- В работе проанализирована скорость работы и точность предсказаний моделей линейной регрессии, случайного леса и градиентного бустинга при определении цены автомобиля. Показано, что наилучшими характеристиками быстродействия и точности обладает модель градиентного бустинга. Обучение - 7 сек, предсказание - 1,4 сек, величина RMSE - 1785.\\n\",\r\n    \"- Наибольшее влияние на цену автомобиля оказывает год регистрации и мощность двигателя (чем выше тем дороже), а также отсутствие ремонта и наличие автоматической коробки передач.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"metadata\": {\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   },\r\n   \"source\": [\r\n    \"## Чек-лист проверки\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"metadata\": {\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   },\r\n   \"source\": [\r\n    \"Поставьте 'x' в выполненных пунктах. Далее нажмите Shift+Enter.\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"metadata\": {\r\n    \"pycharm\": {\r\n     \"name\": \"#%% md\\n\"\r\n    }\r\n   },\r\n   \"source\": [\r\n    \"- [x]  Jupyter Notebook открыт\\n\",\r\n    \"- [x]  Весь код выполняется без ошибок\\n\",\r\n    \"- [X]  Ячейки с кодом расположены в порядке исполнения\\n\",\r\n    \"- [x]  Выполнена загрузка и подготовка данных\\n\",\r\n    \"- [x]  Выполнено обучение моделей\\n\",\r\n    \"- [X]  Есть анализ скорости работы и качества моделей\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 25,\r\n   \"metadata\": {\r\n    \"pycharm\": {\r\n     \"name\": \"#%%\\n\"\r\n    }\r\n   },\r\n   \"outputs\": [],\r\n   \"source\": []\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"Python 3 (ipykernel)\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 3\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython3\",\r\n   \"version\": \"3.9.12\"\r\n  },\r\n  \"toc\": {\r\n   \"base_numbering\": 1,\r\n   \"nav_menu\": {},\r\n   \"number_sections\": true,\r\n   \"sideBar\": true,\r\n   \"skip_h1_title\": true,\r\n   \"title_cell\": \"Table of Contents\",\r\n   \"title_sidebar\": \"Contents\",\r\n   \"toc_cell\": false,\r\n   \"toc_position\": {},\r\n   \"toc_section_display\": true,\r\n   \"toc_window_display\": false\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 2\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebook.ipynb b/notebook.ipynb
--- a/notebook.ipynb	(revision 25e86edbee355a41f445fa75952a3c2675edd3b4)
+++ b/notebook.ipynb	(date 1659716377256)
@@ -82,7 +82,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 33,
+   "execution_count": 1,
+   "metadata": {
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   },
    "outputs": [],
    "source": [
     "from IPython.display import display\n",
@@ -100,60 +105,213 @@
     "from lightgbm import LGBMRegressor\n",
     "\n",
     "import shap"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
+   ]
   },
   {
    "cell_type": "markdown",
-   "source": [
-    "Введем константы."
-   ],
    "metadata": {
-    "collapsed": false,
     "pycharm": {
      "name": "#%% md\n"
     }
-   }
+   },
+   "source": [
+    "Введем константы."
+   ]
   },
   {
    "cell_type": "code",
    "execution_count": 2,
-   "outputs": [],
-   "source": [
-    "SEED = 515"
-   ],
    "metadata": {
-    "collapsed": false,
     "pycharm": {
      "name": "#%%\n"
     }
-   }
-  },
-  {
-   "cell_type": "markdown",
+   },
+   "outputs": [],
    "source": [
-    "## Подготовка данных"
-   ],
+    "SEED = 515"
+   ]
+  },
+  {
+   "cell_type": "markdown",
    "metadata": {
-    "collapsed": false,
     "pycharm": {
      "name": "#%% md\n"
     }
-   }
+   },
+   "source": [
+    "## Подготовка данных"
+   ]
   },
   {
    "cell_type": "code",
    "execution_count": 3,
+   "metadata": {
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   },
    "outputs": [
     {
      "data": {
-      "text/plain": "           DateCrawled  Price VehicleType  RegistrationYear Gearbox  Power  \\\n0  2016-03-24 11:52:17    480         NaN              1993  manual      0   \n1  2016-03-24 10:58:45  18300       coupe              2011  manual    190   \n2  2016-03-14 12:52:21   9800         suv              2004    auto    163   \n3  2016-03-17 16:54:04   1500       small              2001  manual     75   \n4  2016-03-31 17:25:20   3600       small              2008  manual     69   \n\n   Model  Kilometer  RegistrationMonth  FuelType       Brand NotRepaired  \\\n0   golf     150000                  0    petrol  volkswagen         NaN   \n1    NaN     125000                  5  gasoline        audi         yes   \n2  grand     125000                  8  gasoline        jeep         NaN   \n3   golf     150000                  6    petrol  volkswagen          no   \n4  fabia      90000                  7  gasoline       skoda          no   \n\n           DateCreated  NumberOfPictures  PostalCode             LastSeen  \n0  2016-03-24 00:00:00                 0       70435  2016-04-07 03:16:57  \n1  2016-03-24 00:00:00                 0       66954  2016-04-07 01:46:50  \n2  2016-03-14 00:00:00                 0       90480  2016-04-05 12:47:46  \n3  2016-03-17 00:00:00                 0       91074  2016-03-17 17:40:17  \n4  2016-03-31 00:00:00                 0       60437  2016-04-06 10:17:21  ",
-      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>DateCrawled</th>\n      <th>Price</th>\n      <th>VehicleType</th>\n      <th>RegistrationYear</th>\n      <th>Gearbox</th>\n      <th>Power</th>\n      <th>Model</th>\n      <th>Kilometer</th>\n      <th>RegistrationMonth</th>\n      <th>FuelType</th>\n      <th>Brand</th>\n      <th>NotRepaired</th>\n      <th>DateCreated</th>\n      <th>NumberOfPictures</th>\n      <th>PostalCode</th>\n      <th>LastSeen</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2016-03-24 11:52:17</td>\n      <td>480</td>\n      <td>NaN</td>\n      <td>1993</td>\n      <td>manual</td>\n      <td>0</td>\n      <td>golf</td>\n      <td>150000</td>\n      <td>0</td>\n      <td>petrol</td>\n      <td>volkswagen</td>\n      <td>NaN</td>\n      <td>2016-03-24 00:00:00</td>\n      <td>0</td>\n      <td>70435</td>\n      <td>2016-04-07 03:16:57</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2016-03-24 10:58:45</td>\n      <td>18300</td>\n      <td>coupe</td>\n      <td>2011</td>\n      <td>manual</td>\n      <td>190</td>\n      <td>NaN</td>\n      <td>125000</td>\n      <td>5</td>\n      <td>gasoline</td>\n      <td>audi</td>\n      <td>yes</td>\n      <td>2016-03-24 00:00:00</td>\n      <td>0</td>\n      <td>66954</td>\n      <td>2016-04-07 01:46:50</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2016-03-14 12:52:21</td>\n      <td>9800</td>\n      <td>suv</td>\n      <td>2004</td>\n      <td>auto</td>\n      <td>163</td>\n      <td>grand</td>\n      <td>125000</td>\n      <td>8</td>\n      <td>gasoline</td>\n      <td>jeep</td>\n      <td>NaN</td>\n      <td>2016-03-14 00:00:00</td>\n      <td>0</td>\n      <td>90480</td>\n      <td>2016-04-05 12:47:46</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2016-03-17 16:54:04</td>\n      <td>1500</td>\n      <td>small</td>\n      <td>2001</td>\n      <td>manual</td>\n      <td>75</td>\n      <td>golf</td>\n      <td>150000</td>\n      <td>6</td>\n      <td>petrol</td>\n      <td>volkswagen</td>\n      <td>no</td>\n      <td>2016-03-17 00:00:00</td>\n      <td>0</td>\n      <td>91074</td>\n      <td>2016-03-17 17:40:17</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2016-03-31 17:25:20</td>\n      <td>3600</td>\n      <td>small</td>\n      <td>2008</td>\n      <td>manual</td>\n      <td>69</td>\n      <td>fabia</td>\n      <td>90000</td>\n      <td>7</td>\n      <td>gasoline</td>\n      <td>skoda</td>\n      <td>no</td>\n      <td>2016-03-31 00:00:00</td>\n      <td>0</td>\n      <td>60437</td>\n      <td>2016-04-06 10:17:21</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>DateCrawled</th>\n",
+       "      <th>Price</th>\n",
+       "      <th>VehicleType</th>\n",
+       "      <th>RegistrationYear</th>\n",
+       "      <th>Gearbox</th>\n",
+       "      <th>Power</th>\n",
+       "      <th>Model</th>\n",
+       "      <th>Kilometer</th>\n",
+       "      <th>RegistrationMonth</th>\n",
+       "      <th>FuelType</th>\n",
+       "      <th>Brand</th>\n",
+       "      <th>NotRepaired</th>\n",
+       "      <th>DateCreated</th>\n",
+       "      <th>NumberOfPictures</th>\n",
+       "      <th>PostalCode</th>\n",
+       "      <th>LastSeen</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>2016-03-24 11:52:17</td>\n",
+       "      <td>480</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1993</td>\n",
+       "      <td>manual</td>\n",
+       "      <td>0</td>\n",
+       "      <td>golf</td>\n",
+       "      <td>150000</td>\n",
+       "      <td>0</td>\n",
+       "      <td>petrol</td>\n",
+       "      <td>volkswagen</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>2016-03-24 00:00:00</td>\n",
+       "      <td>0</td>\n",
+       "      <td>70435</td>\n",
+       "      <td>2016-04-07 03:16:57</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>2016-03-24 10:58:45</td>\n",
+       "      <td>18300</td>\n",
+       "      <td>coupe</td>\n",
+       "      <td>2011</td>\n",
+       "      <td>manual</td>\n",
+       "      <td>190</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>125000</td>\n",
+       "      <td>5</td>\n",
+       "      <td>gasoline</td>\n",
+       "      <td>audi</td>\n",
+       "      <td>yes</td>\n",
+       "      <td>2016-03-24 00:00:00</td>\n",
+       "      <td>0</td>\n",
+       "      <td>66954</td>\n",
+       "      <td>2016-04-07 01:46:50</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>2016-03-14 12:52:21</td>\n",
+       "      <td>9800</td>\n",
+       "      <td>suv</td>\n",
+       "      <td>2004</td>\n",
+       "      <td>auto</td>\n",
+       "      <td>163</td>\n",
+       "      <td>grand</td>\n",
+       "      <td>125000</td>\n",
+       "      <td>8</td>\n",
+       "      <td>gasoline</td>\n",
+       "      <td>jeep</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>2016-03-14 00:00:00</td>\n",
+       "      <td>0</td>\n",
+       "      <td>90480</td>\n",
+       "      <td>2016-04-05 12:47:46</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>2016-03-17 16:54:04</td>\n",
+       "      <td>1500</td>\n",
+       "      <td>small</td>\n",
+       "      <td>2001</td>\n",
+       "      <td>manual</td>\n",
+       "      <td>75</td>\n",
+       "      <td>golf</td>\n",
+       "      <td>150000</td>\n",
+       "      <td>6</td>\n",
+       "      <td>petrol</td>\n",
+       "      <td>volkswagen</td>\n",
+       "      <td>no</td>\n",
+       "      <td>2016-03-17 00:00:00</td>\n",
+       "      <td>0</td>\n",
+       "      <td>91074</td>\n",
+       "      <td>2016-03-17 17:40:17</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>2016-03-31 17:25:20</td>\n",
+       "      <td>3600</td>\n",
+       "      <td>small</td>\n",
+       "      <td>2008</td>\n",
+       "      <td>manual</td>\n",
+       "      <td>69</td>\n",
+       "      <td>fabia</td>\n",
+       "      <td>90000</td>\n",
+       "      <td>7</td>\n",
+       "      <td>gasoline</td>\n",
+       "      <td>skoda</td>\n",
+       "      <td>no</td>\n",
+       "      <td>2016-03-31 00:00:00</td>\n",
+       "      <td>0</td>\n",
+       "      <td>60437</td>\n",
+       "      <td>2016-04-06 10:17:21</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "           DateCrawled  Price VehicleType  RegistrationYear Gearbox  Power  \\\n",
+       "0  2016-03-24 11:52:17    480         NaN              1993  manual      0   \n",
+       "1  2016-03-24 10:58:45  18300       coupe              2011  manual    190   \n",
+       "2  2016-03-14 12:52:21   9800         suv              2004    auto    163   \n",
+       "3  2016-03-17 16:54:04   1500       small              2001  manual     75   \n",
+       "4  2016-03-31 17:25:20   3600       small              2008  manual     69   \n",
+       "\n",
+       "   Model  Kilometer  RegistrationMonth  FuelType       Brand NotRepaired  \\\n",
+       "0   golf     150000                  0    petrol  volkswagen         NaN   \n",
+       "1    NaN     125000                  5  gasoline        audi         yes   \n",
+       "2  grand     125000                  8  gasoline        jeep         NaN   \n",
+       "3   golf     150000                  6    petrol  volkswagen          no   \n",
+       "4  fabia      90000                  7  gasoline       skoda          no   \n",
+       "\n",
+       "           DateCreated  NumberOfPictures  PostalCode             LastSeen  \n",
+       "0  2016-03-24 00:00:00                 0       70435  2016-04-07 03:16:57  \n",
+       "1  2016-03-24 00:00:00                 0       66954  2016-04-07 01:46:50  \n",
+       "2  2016-03-14 00:00:00                 0       90480  2016-04-05 12:47:46  \n",
+       "3  2016-03-17 00:00:00                 0       91074  2016-03-17 17:40:17  \n",
+       "4  2016-03-31 00:00:00                 0       60437  2016-04-06 10:17:21  "
+      ]
      },
      "metadata": {},
      "output_type": "display_data"
@@ -189,7 +347,25 @@
     },
     {
      "data": {
-      "text/plain": "DateCrawled              0\nPrice                    0\nVehicleType          37490\nRegistrationYear         0\nGearbox              19833\nPower                    0\nModel                19705\nKilometer                0\nRegistrationMonth        0\nFuelType             32895\nBrand                    0\nNotRepaired          71154\nDateCreated              0\nNumberOfPictures         0\nPostalCode               0\nLastSeen                 0\ndtype: int64"
+      "text/plain": [
+       "DateCrawled              0\n",
+       "Price                    0\n",
+       "VehicleType          37490\n",
+       "RegistrationYear         0\n",
+       "Gearbox              19833\n",
+       "Power                    0\n",
+       "Model                19705\n",
+       "Kilometer                0\n",
+       "RegistrationMonth        0\n",
+       "FuelType             32895\n",
+       "Brand                    0\n",
+       "NotRepaired          71154\n",
+       "DateCreated              0\n",
+       "NumberOfPictures         0\n",
+       "PostalCode               0\n",
+       "LastSeen                 0\n",
+       "dtype: int64"
+      ]
      },
      "execution_count": 3,
      "metadata": {},
@@ -205,68 +381,63 @@
     "display(df.head())\n",
     "df.info()\n",
     "df.isna().sum()"
-   ],
+   ]
+  },
+  {
+   "cell_type": "markdown",
    "metadata": {
-    "collapsed": false,
     "pycharm": {
-     "name": "#%%\n"
+     "name": "#%% md\n"
     }
-   }
-  },
-  {
-   "cell_type": "markdown",
+   },
    "source": [
     "Можно видеть, что в категориальных данных содержится значительное количество пропусков."
-   ],
+   ]
+  },
+  {
+   "cell_type": "markdown",
    "metadata": {
-    "collapsed": false,
     "pycharm": {
      "name": "#%% md\n"
     }
-   }
-  },
-  {
-   "cell_type": "markdown",
+   },
    "source": [
     "Вначале, удалим малоинформативные колонки."
-   ],
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 4,
    "metadata": {
-    "collapsed": false,
     "pycharm": {
-     "name": "#%% md\n"
+     "name": "#%%\n"
     }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
+   },
    "outputs": [],
    "source": [
     "cols_to_drop = ['DateCrawled', 'DateCreated', 'RegistrationMonth', 'PostalCode', 'LastSeen']\n",
     "df = df.drop(columns=cols_to_drop)"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
+   ]
   },
   {
    "cell_type": "markdown",
-   "source": [
-    "Проверим количество уникальных значений в колонке с количеством фотографий."
-   ],
    "metadata": {
-    "collapsed": false,
     "pycharm": {
      "name": "#%% md\n"
     }
-   }
+   },
+   "source": [
+    "Проверим количество уникальных значений в колонке с количеством фотографий."
+   ]
   },
   {
    "cell_type": "code",
    "execution_count": 5,
+   "metadata": {
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   },
    "outputs": [
     {
      "name": "stdout",
@@ -278,55 +449,51 @@
    ],
    "source": [
     "print(df['NumberOfPictures'].unique())"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
+   ]
   },
   {
    "cell_type": "markdown",
-   "source": [
-    "Удалим ее как малоинформативную."
-   ],
    "metadata": {
-    "collapsed": false,
     "pycharm": {
      "name": "#%% md\n"
     }
-   }
+   },
+   "source": [
+    "Удалим ее как малоинформативную."
+   ]
   },
   {
    "cell_type": "code",
    "execution_count": 6,
+   "metadata": {
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   },
    "outputs": [],
    "source": [
     "df = df.drop('NumberOfPictures', axis=1)"
-   ],
+   ]
+  },
+  {
+   "cell_type": "markdown",
    "metadata": {
-    "collapsed": false,
     "pycharm": {
-     "name": "#%%\n"
+     "name": "#%% md\n"
     }
-   }
-  },
-  {
-   "cell_type": "markdown",
+   },
    "source": [
     "Проверим уникальные значения в категориальных колонках на наличие опечаток."
-   ],
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 7,
    "metadata": {
-    "collapsed": false,
     "pycharm": {
-     "name": "#%% md\n"
+     "name": "#%%\n"
     }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 7,
+   },
    "outputs": [
     {
      "name": "stdout",
@@ -388,41 +555,38 @@
     "for col in cat_cols:\n",
     "    print(col)\n",
     "    print(df[col].unique())"
-   ],
+   ]
+  },
+  {
+   "cell_type": "markdown",
    "metadata": {
-    "collapsed": false,
     "pycharm": {
-     "name": "#%%\n"
+     "name": "#%% md\n"
     }
-   }
-  },
-  {
-   "cell_type": "markdown",
+   },
    "source": [
     "Опечатки не обнаружены."
-   ],
+   ]
+  },
+  {
+   "cell_type": "markdown",
    "metadata": {
-    "collapsed": false,
     "pycharm": {
      "name": "#%% md\n"
     }
-   }
-  },
-  {
-   "cell_type": "markdown",
+   },
    "source": [
     "Заменим пропущенные значения на unknown."
-   ],
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 8,
    "metadata": {
-    "collapsed": false,
     "pycharm": {
-     "name": "#%% md\n"
+     "name": "#%%\n"
     }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 8,
+   },
    "outputs": [
     {
      "name": "stdout",
@@ -433,7 +597,19 @@
     },
     {
      "data": {
-      "text/plain": "Price               0\nVehicleType         0\nRegistrationYear    0\nGearbox             0\nPower               0\nModel               0\nKilometer           0\nFuelType            0\nBrand               0\nNotRepaired         0\ndtype: int64"
+      "text/plain": [
+       "Price               0\n",
+       "VehicleType         0\n",
+       "RegistrationYear    0\n",
+       "Gearbox             0\n",
+       "Power               0\n",
+       "Model               0\n",
+       "Kilometer           0\n",
+       "FuelType            0\n",
+       "Brand               0\n",
+       "NotRepaired         0\n",
+       "dtype: int64"
+      ]
      },
      "execution_count": 8,
      "metadata": {},
@@ -444,34 +620,127 @@
     "df = df.fillna('unknown')\n",
     "print('Количество пропущенных значений:')\n",
     "df.isna().sum()"
-   ],
+   ]
+  },
+  {
+   "cell_type": "markdown",
    "metadata": {
-    "collapsed": false,
     "pycharm": {
-     "name": "#%%\n"
+     "name": "#%% md\n"
     }
-   }
-  },
-  {
-   "cell_type": "markdown",
+   },
    "source": [
     "Проверим числовые данные."
-   ],
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 9,
    "metadata": {
-    "collapsed": false,
     "pycharm": {
-     "name": "#%% md\n"
+     "name": "#%%\n"
     }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 9,
+   },
    "outputs": [
     {
      "data": {
-      "text/plain": "               Price  RegistrationYear          Power      Kilometer\ncount  354369.000000     354369.000000  354369.000000  354369.000000\nmean     4416.656776       2004.234448     110.094337  128211.172535\nstd      4514.158514         90.227958     189.850405   37905.341530\nmin         0.000000       1000.000000       0.000000    5000.000000\n25%      1050.000000       1999.000000      69.000000  125000.000000\n50%      2700.000000       2003.000000     105.000000  150000.000000\n75%      6400.000000       2008.000000     143.000000  150000.000000\nmax     20000.000000       9999.000000   20000.000000  150000.000000",
-      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Price</th>\n      <th>RegistrationYear</th>\n      <th>Power</th>\n      <th>Kilometer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>354369.000000</td>\n      <td>354369.000000</td>\n      <td>354369.000000</td>\n      <td>354369.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>4416.656776</td>\n      <td>2004.234448</td>\n      <td>110.094337</td>\n      <td>128211.172535</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>4514.158514</td>\n      <td>90.227958</td>\n      <td>189.850405</td>\n      <td>37905.341530</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>1000.000000</td>\n      <td>0.000000</td>\n      <td>5000.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1050.000000</td>\n      <td>1999.000000</td>\n      <td>69.000000</td>\n      <td>125000.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2700.000000</td>\n      <td>2003.000000</td>\n      <td>105.000000</td>\n      <td>150000.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>6400.000000</td>\n      <td>2008.000000</td>\n      <td>143.000000</td>\n      <td>150000.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>20000.000000</td>\n      <td>9999.000000</td>\n      <td>20000.000000</td>\n      <td>150000.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>Price</th>\n",
+       "      <th>RegistrationYear</th>\n",
+       "      <th>Power</th>\n",
+       "      <th>Kilometer</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>count</th>\n",
+       "      <td>354369.000000</td>\n",
+       "      <td>354369.000000</td>\n",
+       "      <td>354369.000000</td>\n",
+       "      <td>354369.000000</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>mean</th>\n",
+       "      <td>4416.656776</td>\n",
+       "      <td>2004.234448</td>\n",
+       "      <td>110.094337</td>\n",
+       "      <td>128211.172535</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>std</th>\n",
+       "      <td>4514.158514</td>\n",
+       "      <td>90.227958</td>\n",
+       "      <td>189.850405</td>\n",
+       "      <td>37905.341530</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>min</th>\n",
+       "      <td>0.000000</td>\n",
+       "      <td>1000.000000</td>\n",
+       "      <td>0.000000</td>\n",
+       "      <td>5000.000000</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>25%</th>\n",
+       "      <td>1050.000000</td>\n",
+       "      <td>1999.000000</td>\n",
+       "      <td>69.000000</td>\n",
+       "      <td>125000.000000</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>50%</th>\n",
+       "      <td>2700.000000</td>\n",
+       "      <td>2003.000000</td>\n",
+       "      <td>105.000000</td>\n",
+       "      <td>150000.000000</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>75%</th>\n",
+       "      <td>6400.000000</td>\n",
+       "      <td>2008.000000</td>\n",
+       "      <td>143.000000</td>\n",
+       "      <td>150000.000000</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>max</th>\n",
+       "      <td>20000.000000</td>\n",
+       "      <td>9999.000000</td>\n",
+       "      <td>20000.000000</td>\n",
+       "      <td>150000.000000</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "               Price  RegistrationYear          Power      Kilometer\n",
+       "count  354369.000000     354369.000000  354369.000000  354369.000000\n",
+       "mean     4416.656776       2004.234448     110.094337  128211.172535\n",
+       "std      4514.158514         90.227958     189.850405   37905.341530\n",
+       "min         0.000000       1000.000000       0.000000    5000.000000\n",
+       "25%      1050.000000       1999.000000      69.000000  125000.000000\n",
+       "50%      2700.000000       2003.000000     105.000000  150000.000000\n",
+       "75%      6400.000000       2008.000000     143.000000  150000.000000\n",
+       "max     20000.000000       9999.000000   20000.000000  150000.000000"
+      ]
      },
      "execution_count": 9,
      "metadata": {},
@@ -480,19 +749,13 @@
    ],
    "source": [
     "df.describe()"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
+   ]
   },
   {
    "cell_type": "markdown",
    "source": [
     "Можно видеть некорректные данные в колонках с годом регистрации и мощностью автомобиля. В колонке с годом регистрации присутствуют недостоверно малые значения 1000 и недостоверно большие значения 9999. В колонке с мощностью также обнаруживаются крайне малые значения (0) и крайне большие значения (20000) лошадиных сил.\n",
-    "- Возможно, что некорректные данные в столбце с годом регистрации появились из-за того, что информации была записана в разных форматах: в годах и в днях начиная с начала 1970 года. Поэтому заменим значения меньше 1970 и больше 2022 на число, равное сумме 1970 и результата целочисленного деления некорректного значения на 365.\n",
+    "- Возможно, что некорректные данные в столбце с годом регистрации появились из-за того, что информация была записана в разных форматах: в годах и в днях начиная с начала 1970 года. Поэтому заменим значения меньше 1970 и больше 2022 на число, равное сумме 1970 и результата целочисленного деления некорректного значения на 365.\n",
     "- Высокие значения в столбце с мощностью автомобиля могут быть связаны также с неправильным форматом данных (указаны Ватты вместо лошадиных сил), поэтому значения выше 500 (примерная мощность тяжелого грузовика) заменим на частное некорректного значения и 736, т.к. 1 л.с. = 736 Вт. Нулевые значения в рассматриваемом столбце могли появиться из-за того, что владелец не знает мощности своего автомобиля и поэтому не указал его, заменим его на медианное."
    ],
    "metadata": {
@@ -504,7 +767,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": null,
    "outputs": [],
    "source": [
     "df['RegistrationYear'] = df['RegistrationYear'].apply(lambda x: x // 365 + 1970 if (x > 2022 or x < 1970) else x)\n",
@@ -534,11 +797,11 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 11,
+   "execution_count": null,
    "outputs": [],
    "source": [
-    "# report_autos = sv.analyze((df, 'autos_df'), target_feat='Price')\n",
-    "# report_autos.show_notebook()"
+    "report_autos = sv.analyze((df, 'autos_df'), target_feat='Price')\n",
+    "report_autos.show_notebook()"
    ],
    "metadata": {
     "collapsed": false,
@@ -597,17 +860,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Размер набора данных до OHE: (354369, 10)\n",
-      "Размер набора данных после OHE: (354369, 312)\n"
-     ]
-    }
-   ],
+   "execution_count": null,
+   "outputs": [],
    "source": [
     "df_ohe = df.copy()\n",
     "df_ohe = pd.get_dummies(df_ohe, drop_first=True)\n",
@@ -636,7 +890,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": null,
    "outputs": [],
    "source": [
     "X_ohe = df_ohe.drop('Price', axis=1)\n",
@@ -665,7 +919,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": null,
    "outputs": [],
    "source": [
     "# pipe_lr = Pipeline([('scaler', StandardScaler()),\n",
@@ -705,7 +959,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 15,
+   "execution_count": null,
    "outputs": [],
    "source": [
     "best_pipe_lr = Pipeline([('scaler', StandardScaler()),\n",
@@ -720,26 +974,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 16,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Время обучения ElasticNet на тренировочной выборке:\n",
-      "Wall time: 13min 14s\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": "Pipeline(steps=[('scaler', StandardScaler()),\n                ('lr', ElasticNet(alpha=0.1, l1_ratio=1, max_iter=10000))])",
-      "text/html": "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n                (&#x27;lr&#x27;, ElasticNet(alpha=0.1, l1_ratio=1, max_iter=10000))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n                (&#x27;lr&#x27;, ElasticNet(alpha=0.1, l1_ratio=1, max_iter=10000))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ElasticNet</label><div class=\"sk-toggleable__content\"><pre>ElasticNet(alpha=0.1, l1_ratio=1, max_iter=10000)</pre></div></div></div></div></div></div></div>"
-     },
-     "execution_count": 16,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "execution_count": null,
+   "outputs": [],
    "source": [
     "%%time\n",
     "print('Время обучения ElasticNet на тренировочной выборке:')\n",
@@ -754,17 +990,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 17,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Время предсказания ElasticNet на тестовой выборке:\n",
-      "Wall time: 1.08 s\n"
-     ]
-    }
-   ],
+   "execution_count": null,
+   "outputs": [],
    "source": [
     "%%time\n",
     "print('Время предсказания ElasticNet на тестовой выборке:')\n",
@@ -779,16 +1006,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 18,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "RMSE модели ElasticNet на тестовой выборке: 2703\n"
-     ]
-    }
-   ],
+   "execution_count": null,
+   "outputs": [],
    "source": [
     "rmse_lr = mean_squared_error(y_ohe_test, y_lr_pred, squared=False)\n",
     "print('RMSE модели ElasticNet на тестовой выборке:', int(rmse_lr))"
@@ -826,18 +1045,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 19,
-   "outputs": [
-    {
-     "data": {
-      "text/plain": "   Price  RegistrationYear  Power  Kilometer  VehicleType_LE  Gearbox_LE  \\\n0    480              1993    105     150000               7           1   \n1  18300              2011    190     125000               2           1   \n2   9800              2004    163     125000               6           0   \n3   1500              2001     75     150000               5           1   \n4   3600              2008     69      90000               5           1   \n\n   Model_LE  FuelType_LE  Brand_LE  NotRepaired_LE  \n0       116            6        38               1  \n1       228            2         1               2  \n2       117            2        14               1  \n3       116            6        38               0  \n4       101            2        31               0  ",
-      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Price</th>\n      <th>RegistrationYear</th>\n      <th>Power</th>\n      <th>Kilometer</th>\n      <th>VehicleType_LE</th>\n      <th>Gearbox_LE</th>\n      <th>Model_LE</th>\n      <th>FuelType_LE</th>\n      <th>Brand_LE</th>\n      <th>NotRepaired_LE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>480</td>\n      <td>1993</td>\n      <td>105</td>\n      <td>150000</td>\n      <td>7</td>\n      <td>1</td>\n      <td>116</td>\n      <td>6</td>\n      <td>38</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>18300</td>\n      <td>2011</td>\n      <td>190</td>\n      <td>125000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>228</td>\n      <td>2</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>9800</td>\n      <td>2004</td>\n      <td>163</td>\n      <td>125000</td>\n      <td>6</td>\n      <td>0</td>\n      <td>117</td>\n      <td>2</td>\n      <td>14</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1500</td>\n      <td>2001</td>\n      <td>75</td>\n      <td>150000</td>\n      <td>5</td>\n      <td>1</td>\n      <td>116</td>\n      <td>6</td>\n      <td>38</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3600</td>\n      <td>2008</td>\n      <td>69</td>\n      <td>90000</td>\n      <td>5</td>\n      <td>1</td>\n      <td>101</td>\n      <td>2</td>\n      <td>31</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-     },
-     "execution_count": 19,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "execution_count": null,
+   "outputs": [],
    "source": [
     "df_cat = df.copy()\n",
     "\n",
@@ -868,7 +1077,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 20,
+   "execution_count": null,
    "outputs": [],
    "source": [
     "X_le = df_le.drop('Price', axis=1)\n",
@@ -897,7 +1106,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 21,
+   "execution_count": null,
    "outputs": [],
    "source": [
     "# params_rf = {'n_estimators': [50, 100, 200, 300],\n",
@@ -933,7 +1142,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 22,
+   "execution_count": null,
    "outputs": [],
    "source": [
     "best_rf = RandomForestRegressor(max_depth=12, n_estimators=300, random_state=SEED)"
@@ -947,82 +1156,50 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 23,
-   "metadata": {
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Время обучения RandomForestRegressor на тренировочной выборке:\n",
-      "Wall time: 6min 52s\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": "RandomForestRegressor(max_depth=12, n_estimators=300, random_state=515)",
-      "text/html": "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(max_depth=12, n_estimators=300, random_state=515)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(max_depth=12, n_estimators=300, random_state=515)</pre></div></div></div></div></div>"
-     },
-     "execution_count": 23,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "execution_count": null,
+   "outputs": [],
    "source": [
     "%%time\n",
     "print('Время обучения RandomForestRegressor на тренировочной выборке:')\n",
     "best_rf.fit(X_le_train, y_le_train)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 24,
+   ],
    "metadata": {
+    "collapsed": false,
     "pycharm": {
      "name": "#%%\n"
     }
-   },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Время предсказания RandomForestRegressor на тестовой выборке:\n",
-      "Wall time: 6.35 s\n"
-     ]
-    }
-   ],
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
    "source": [
     "%%time\n",
     "print('Время предсказания RandomForestRegressor на тестовой выборке:')\n",
     "y_rf_pred = best_rf.predict(X_le_test)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 25,
+   ],
    "metadata": {
+    "collapsed": false,
     "pycharm": {
      "name": "#%%\n"
     }
-   },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "RMSE модели RandomForestRegressor на тестовой выборке: 1924\n"
-     ]
-    }
-   ],
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
    "source": [
     "rmse_rf = mean_squared_error(y_le_test, y_rf_pred, squared=False)\n",
     "print('RMSE модели RandomForestRegressor на тестовой выборке:', int(rmse_rf))"
-   ]
+   ],
+   "metadata": {
+    "collapsed": false,
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   }
   },
   {
    "cell_type": "markdown",
@@ -1050,24 +1227,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 42,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Fitting 5 folds for each of 140 candidates, totalling 700 fits\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": "{'learning_rate': 0.1, 'max_depth': 10, 'n_estimators': 300}"
-     },
-     "execution_count": 42,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "execution_count": null,
+   "outputs": [],
    "source": [
     "# params_gb = {'n_estimators': [50, 100, 200, 300],\n",
     "#              'max_depth': [1, 2, 4, 6, 8, 10, 12],\n",
@@ -1103,242 +1264,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 43,
-   "outputs": [],
-   "source": [
-    "best_gb = LGBMRegressor(max_depth=10, n_estimators=300, learning_rate=0.1, random_state=SEED)"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 44,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Время обучения LGBMRegressor на тренировочной выборке:\n",
-      "Wall time: 6.85 s\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": "LGBMRegressor(max_depth=10, n_estimators=300, random_state=515)",
-      "text/html": "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LGBMRegressor(max_depth=10, n_estimators=300, random_state=515)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LGBMRegressor</label><div class=\"sk-toggleable__content\"><pre>LGBMRegressor(max_depth=10, n_estimators=300, random_state=515)</pre></div></div></div></div></div>"
-     },
-     "execution_count": 44,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "%%time\n",
-    "print('Время обучения LGBMRegressor на тренировочной выборке:')\n",
-    "best_gb.fit(X_le_train, y_le_train)"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 45,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Время предсказания LGBMRegressor на тестовой выборке:\n",
-      "Wall time: 1.36 s\n"
-     ]
-    }
-   ],
-   "source": [
-    "%%time\n",
-    "print('Время предсказания LGBMRegressor на тестовой выборке:')\n",
-    "y_gb_pred = best_gb.predict(X_le_test)"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 46,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "RMSE модели LGBMRegressor на тестовой выборке: 1785\n"
-     ]
-    }
-   ],
-   "source": [
-    "rmse_gb = mean_squared_error(y_le_test, y_gb_pred, squared=False)\n",
-    "print('RMSE модели LGBMRegressor на тестовой выборке:', int(rmse_gb))"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "markdown",
-   "source": [
-    "Анализ трех разных моделей показывает, что лидером является модель градиентного бустинга LGBMRegressor. Она обладает наилучшими характеристиками в скорости обучения и предсказания (скорость предсказания только немного уступает линейной регрессии) и наименьшим значением метрики RMSE, меньшим требуемого значения 2500."
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%% md\n"
-    }
-   }
-  },
-  {
-   "cell_type": "markdown",
-   "source": [
-    "## Важность признаков"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%% md\n"
-    }
-   }
-  },
-  {
-   "cell_type": "markdown",
-   "source": [
-    "Оценим важность признаков для модели градиентного бустинга с помощью пакета SHAP."
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%% md\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 47,
-   "outputs": [
-    {
-     "data": {
-      "text/plain": "<Figure size 576x367.2 with 2 Axes>",
-      "image/png": "\n"
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "shap_gb = shap.TreeExplainer(best_gb).shap_values(X_le_train)\n",
-    "shap.summary_plot(shap_gb, X_le_train, plot_size='auto')"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "markdown",
-   "source": [
-    "Значения слева от центральной вертикальной линии показывают тенденцию к уменьшению цены автомобиля, а справа к увеличению. Чем толще участок горизонтальной линии, тем больше подобных образцов. Цвет горизонтальной линии соответствует величине признака (чем ближе к красному, тем выше и соответственно чем ближе к синему тем меньше).\n",
-    "\n",
-    "Можно видеть, что наибольшее влияние на цену автомобиля оказываю год регистрации и мощность двигателя. Чем выше эти величины, т.е. чем мощнее автомобиль и чем он новее тем выше будет его цена. Пробег автомобиля не оказывает однозначного влияния на цену, автомобили с низким пробегом могут обладать, как высокой, так и низкой ценой. Также можно интерпретировать признаки с малым количеством меток: отсутствие ремонта приводит к удорожанию автомобиля так же как и наличие автоматической коробки передач. Признаки с большим количеством меток интерпретировать затруднительно."
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%% md\n"
-    }
-   }
-  },
-  {
-   "cell_type": "markdown",
-   "source": [
-    "## Вывод"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%% md\n"
-    }
-   }
-  },
-  {
-   "cell_type": "markdown",
-   "source": [
-    "- В работе проанализирована скорость работы и точность предсказаний моделей линейной регрессии, случайного леса и градиентного бустинга при определении цены автомобиля. Показано, что наилучшими характеристиками быстродействия и точности обладает модель градиентного бустинга. Обучение - 7 сек, предсказание - 1,4 сек, величина RMSE - 1785.\n",
-    "- Наибольшее влияние на цену автомобиля оказывает год регистрации и мощность двигателя (чем выше тем дороже), а также отсутствие ремонта и наличие автоматической коробки передач."
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%% md\n"
-    }
-   }
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {
-    "pycharm": {
-     "name": "#%% md\n"
-    }
-   },
-   "source": [
-    "## Чек-лист проверки"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {
-    "pycharm": {
-     "name": "#%% md\n"
-    }
-   },
-   "source": [
-    "Поставьте 'x' в выполненных пунктах. Далее нажмите Shift+Enter."
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {
-    "pycharm": {
-     "name": "#%% md\n"
-    }
-   },
-   "source": [
-    "- [x]  Jupyter Notebook открыт\n",
-    "- [x]  Весь код выполняется без ошибок\n",
-    "- [X]  Ячейки с кодом расположены в порядке исполнения\n",
-    "- [x]  Выполнена загрузка и подготовка данных\n",
-    "- [x]  Выполнено обучение моделей\n",
-    "- [X]  Есть анализ скорости работы и качества моделей"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 25,
+   "execution_count": null,
    "metadata": {
     "pycharm": {
      "name": "#%%\n"
